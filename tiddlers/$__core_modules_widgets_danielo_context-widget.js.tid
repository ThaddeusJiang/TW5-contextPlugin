created: 20140418153435777
creator: danielo
modified: 20140529185409648
modifier: danielo
module-type: widget
tags: plugin
title: $:/core/modules/widgets/danielo/context-widget.js
type: application/javascript

/*\\
title: $:/core/modules/widgets/danielo/context-widget.js
type: application/javascript
module-type: widget

Edit-text widget

\*/
(function(){

/*jslint node: true, browser: true */
/*global $tw: false */
"use strict";

var Widget = require("$:/core/modules/widgets/widget.js").widget;
var contextWidget = function(parseTreeNode,options) {
	this.initialise(parseTreeNode,options);
};

/*
Inherit from the base widget class
*/
contextWidget.prototype = new Widget();

/*
Render this widget into the DOM
*/
contextWidget.prototype.render = function(parent,nextSibling) {
	// Save the parent dom node
	this.parentDomNode = parent;
	// Compute our attributes
	this.computeAttributes();
	// Execute our logic
	this.execute();
	 this.domNode = this.document.createElement("pre");
	this.domNode.className="tw-context-div";
    this.domNode.setAttribute("hidden","true")
  if(this.term && this.term.length>3){
 	  this.createRegexp();
      var matches = this.executeRegexp();
	  if(matches.length > 0) this.composeResults( matches ); //this appends to domNode and reveals it

  }
	/// Insert element
    parent.insertBefore(this.domNode,nextSibling);
    this.renderChildren(this.domNode,null);
	this.domNodes.push(this.domNode);
};

/*
Compute the internal state of the widget
*/
contextWidget.prototype.execute = function() {
	// Get the parameters from the attributes
    this.matchedClass = this.getAttribute("class","matched");
	this.tiddler = this.getAttribute( "tiddler",this.getVariable("currentTiddler") );
    this.term = this.getAttribute("term",this.getAttribute("searchTerm"));
	this.contextLength = this.getAttribute("length",50);
    this.before = this.getAttribute("before",this.contextLength);
    this.after = this.getAttribute("after",this.contextLength);

	this.makeChildWidgets();
};

  /*Create the regular expression*/
contextWidget.prototype.createRegexp = function()
{
  var regString = "(\\w+[\\s\\S]{0,#before#})(#term#)([\\s\\S]{0,#after#}(\\w+)?)";

  var regString = regString.replace("#before#",this.before).replace("#term#",this.term).replace("#after#",this.after);
  this.regexp = new RegExp(regString,"ig");
  //console.log(regString);
};
/*
execute the regular expresion
*/
contextWidget.prototype.executeRegexp = function()
{
  var text = this.wiki.getTiddlerText(this.tiddler), match,results = [];
  while( match = this.regexp.exec( text ) )
      { results.push(match) }
  //console.log("matches",results);
  return results;
};

/*
compose the results
matches : array of match objects from regular expression execute
*/
contextWidget.prototype.composeResults = function(matches){
 var result=[],
 dots = this.document.createTextNode("...\n"),
 span = this.document.createElement("span");
 span.appendChild( this.document.createTextNode(this.term)  );
 span.className=this.matchedClass;

  for(var i=0,match; i < matches.length; i++){
   match = matches[i];
    if( match.index !== 0) this.domNode.appendChild(dots.cloneNode(true));
    this.domNode.appendChild( this.document.createTextNode(match[1]) );
    this.domNode.appendChild( span.cloneNode(true) );
    this.domNode.appendChild( this.document.createTextNode(match[3]) );
 }
  this.domNode.removeAttribute("hidden");
};
/*
Selectively refreshes the widget if needed. Returns true if the widget or any of its children needed re-rendering
*/
contextWidget.prototype.refresh = function(changedTiddlers) {
	var changedAttributes = this.computeAttributes();
	if(changedAttributes.tiddler || changedAttributes.term || changedAttributes.length || changedAttributes.matchedClass) {
		this.refreshSelf();
		return true;
	}
    return this.refreshChildren(changedTiddlers);
};

exports.context = contextWidget;

})();